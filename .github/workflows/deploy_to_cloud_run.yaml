# Build and configures Google Cloud Services (Cloud SQL and Cloud Run) and deploys the TechTestApp.

name: CICD

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]

#Set up environment variables
env:
  PROJECT_ID: ${{ secrets.RUN_PROJECT }}
  RUN_REGION: asia-northeast1
  SOLUTION_NAME: techtestapp
        

jobs:
  setup-build-deploy:
    name: Setup, Build, and Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '298.0.0'
        service_account_key: ${{ secrets.RUN_SA_KEY }}
        project_id: ${{ secrets.RUN_PROJECT }}

    #install Cloud Beta SDK Commands for Cloud Run    
    - name: Install_Cloud_Beta_Sdk
      id: install_cloud_beta_sdk
      run: |-
        gcloud components install beta --quiet

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication
    - run: |-
        gcloud --quiet auth configure-docker
        
    # Does VPCAccess network exist
    - name: Check_Network
      id: check_network_exists_vpcaccess
      run: |-
        gcloud compute networks vpc-access connectors describe vpcaccess --region "$RUN_REGION"    

   # - name: Output_Results
   #   id: output_results
   #   run: |-
   #     echo ${{ check_network_exists_vpcaccess.outputs }}
    
    # Enable VPC API Access
    - name: Enable_VPC_API_Access
      id: enable_vpc_api_access
      run: |-
        gcloud services enable vpcaccess.googleapis.com
 
    # Create VPC Connector
    - name: Create_VPC_Connector
      id: create_vpc_connector
      run: |-
        gcloud compute networks vpc-access connectors create vpcaccess \
          --network default \
          --region "$RUN_REGION" \
          --range 10.8.0.0/28
      continue-on-error: true

     # Build the Docker image
    - name: Build
      id: build      
      run: |-
        docker build --tag "gcr.io/$PROJECT_ID/$SOLUTION_NAME-image:$GITHUB_SHA" .
    
    # Push the Docker image to Google Container Registry
    - name: Publish
      id: publish
      run: |-
        docker push "gcr.io/$PROJECT_ID/$SOLUTION_NAME-image:$GITHUB_SHA"        
    
    # Deploy image to Cloud Run
    - name: Deploy
      id: deploy
      run: |-
        gcloud run deploy "$SOLUTION_NAME" \
          --quiet \
          --region "$RUN_REGION" \
          --image "gcr.io/$PROJECT_ID/$SOLUTION_NAME-image:$GITHUB_SHA" \
          --port 80 \
          --update-env-vars VTT_DBHOST=${{ secrets.RUN_SQL_HOST }},VTT_DBUSER=${{ secrets.RUN_SQL_USER }},VTT_DBPASSWORD=${{ secrets.RUN_SQL_PASSWORD }},VTT_DBNAME=${{ secrets.RUN_SQL_DB }},VTT_DBPORT=${{ secrets.RUN_SQL_PORT }},VTT_LISTENPORT=80,VTT_LISTENHOST=0.0.0.0 \
          --platform "managed" \
          --allow-unauthenticated

    # Update Cloud Run with VPC Settings
    - name: Update_Cloud_Run
      id: update_cloud_run
      run: |-
        gcloud beta run services update $SOLUTION_NAME \
          --vpc-connector vpcaccess \
          --platform managed \
          --region "$RUN_REGION" \
          --quiet
